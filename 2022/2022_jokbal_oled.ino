#include <U8g2lib.h>
//OLED
#define start_cursor 0
#define line_width 15

static const unsigned char dog_name[] U8X8_PROGMEM = {// '220728밤thedog-001', 128x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFB, 0xFF, 
  0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0xBF, 0x00, 0x00, 0x00, 0xD4, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x7F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 
  0x0F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 
  0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3F, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 
  0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0F, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
  0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0x01, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x0C, 0x08, 0x00, 0x60, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0x0E, 0x0C, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0E, 0x06, 0x84, 0xC1, 0xE1, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1C, 0x07, 0x84, 0xC1, 0xE1, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x0C, 0x38, 
  0x07, 0xC4, 0x81, 0x63, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3E, 0x08, 0x30, 0x83, 0x86, 0xC3, 0xE3, 0x1B, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14, 0x70, 0xC3, 0x86, 0xFF, 0xE3, 
  0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x01, 0x01, 0x74, 0x60, 
  0xC3, 0x84, 0xFF, 0xE3, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xF8, 
  0x87, 0x00, 0x64, 0xE0, 0xC7, 0x8C, 0xFF, 0xE3, 0x0F, 0x00, 0x30, 0x00, 
  0x00, 0x00, 0x7F, 0xB8, 0x9F, 0x81, 0x4F, 0xE0, 0x87, 0x8C, 0x83, 0xE3, 
  0x01, 0x00, 0x42, 0x00, 0x00, 0x00, 0xF2, 0x0C, 0x9C, 0xF1, 0xCF, 0xC0, 
  0x86, 0x8D, 0x83, 0xC7, 0x01, 0xFE, 0x67, 0x00, 0x3C, 0x00, 0xC3, 0x09, 
  0x98, 0xF9, 0xCD, 0xE0, 0x0E, 0x09, 0xE7, 0xC7, 0x03, 0xFE, 0x47, 0x00, 
  0x3F, 0x00, 0x82, 0x08, 0xB8, 0x81, 0xC9, 0xC0, 0x0E, 0x8B, 0xFF, 0xC7, 
  0x01, 0xE0, 0xF0, 0x87, 0xE3, 0x00, 0xC7, 0x0D, 0xB0, 0xE1, 0x59, 0xE0, 
  0x1C, 0x04, 0xFF, 0x83, 0x01, 0xC0, 0xC0, 0x8F, 0xC0, 0x00, 0x86, 0x0D, 
  0x38, 0xFF, 0x09, 0xE0, 0x18, 0x1C, 0xFE, 0x00, 0x00, 0x80, 0xE0, 0x0C, 
  0x67, 0x00, 0xC3, 0x1C, 0x18, 0xFE, 0x0B, 0x70, 0x38, 0x10, 0x00, 0x10, 
  0x00, 0xC0, 0x60, 0x9C, 0x7F, 0x00, 0xE6, 0x78, 0x1C, 0x80, 0x0B, 0x70, 
  0x70, 0x00, 0x00, 0xFF, 0x01, 0xC0, 0xC0, 0x9C, 0x03, 0x00, 0xF7, 0xF8, 
  0x0F, 0x00, 0x0D, 0x30, 0xE0, 0x00, 0xC0, 0xFF, 0x01, 0x80, 0xC0, 0x18, 
  0x01, 0x00, 0x3E, 0xC0, 0x07, 0x00, 0x04, 0x38, 0xE0, 0x01, 0xC0, 0xFF, 
  0x01, 0x80, 0xE1, 0x78, 0x6F, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x04, 0x1C, 
  0xC0, 0x03, 0xC0, 0xC3, 0x01, 0x80, 0xE1, 0x78, 0xFE, 0x00, 0x04, 0x00, 
  0x00, 0x00, 0x02, 0x0E, 0x00, 0x07, 0xC0, 0x81, 0x01, 0xC0, 0x01, 0x20, 
  0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0F, 0xC0, 0xC1, 
  0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  0x00, 0x3C, 0x80, 0xFD, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xC0, 0x01, 0x00, 0x70, 0xC0, 0xFF, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xE0, 0x81, 0xFF, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 
  0x00, 0xC0, 0x83, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x1F, 0x0A, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x7C, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 
  0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0xDB, 0x80, 0x8D, 0x00, 0x00, 0x00, 0x00, 
  0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xFF, 0x83, 0xFF, 
  0xFF, 0xBF, 0xE7, 0xFD, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x92, 0x83, 0x43, 0xDD, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x03, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x06, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xF0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xCF, 
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};
short pos[8]={1,2,3,4,5,6,7,180};

//화면 전환
unsigned long nowTime=0; // 현재 시간 저장
unsigned long pastTime=0; // 과거 시간 저장

enum displays {NAME, MOTOR, SENSOR, VOID};
enum displays state = NAME;

//OLED
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, 3, 2); //[full framebuffer, size = 1024 bytes]

void oled_display(enum displays);

void setup()
{
#ifdef SERIAL
  Serial.begin(9600);
#endif
  //OLED setup
  u8g2.begin();
  u8g2.enableUTF8Print();
  u8g2.setFontDirection(0);

  oled_display(NAME);
  u8g2.setFont(u8g2_font_t0_13b_tf);
}

void loop()
{
/*******************************OLED Change*******************************/
  nowTime = millis(); // 현재 시간을 저장

  if((nowTime - pastTime) >= ((1000)*3))
  { /*지정 시간 지나면*/
    pastTime = nowTime;
    state = state+1;
    if(state == VOID) state= NAME;
#ifdef SERIAL
    Serial.println(state);
#endif
    u8g2.clearBuffer();
    oled_display(state);
  }
}/*******************************END of LOOP*******************************/

void oled_display(enum displays st)
{
  int line=0;
  if(st==NAME)
  {
      u8g2.firstPage();
      do {
        u8g2.drawXBMP( 0, 0, 128, 64, dog_name);
      } while(u8g2.nextPage());
  }
  else if(st==MOTOR)
  {
      /*******************************MOTOR DEGREE DISPLAY*******************************/
      char leftmotor[4][8];//={0};//모터 각도 int=>string
      char rightmotor[4][8];//={0};
      
      char *buf[8]={"M1","M2","M3","M4","M5","M6","M7","M8"};
      
      for(int num=0; num<4; num++)//모터 각도 값을 문자열로 변환하고
      {
        sprintf(leftmotor[num],"%3d",pos[num]);
        sprintf(rightmotor[num],"%3d",pos[num+4]);
      }
      
      for(line=0; line<4; line++)
      {
        u8g2.setCursor(0,   start_cursor + (line+1)*line_width);  u8g2.print(buf[line]);
        u8g2.setCursor(27,  start_cursor + (line+1)*line_width);  u8g2.print(strcat(leftmotor[line],"°"));
        u8g2.setCursor(73,  start_cursor + (line+1)*line_width);  u8g2.print(buf[line+4]);
        u8g2.setCursor(100, start_cursor + (line+1)*line_width);  u8g2.print(strcat(rightmotor[line],"°"));
      }
      while( u8g2.nextPage() );
  }
  else if(st==SENSOR)
  {
      u8g2.clearBuffer();
      char sensor[8][4];//={0};
      char *sensorName[8]={"G_x","G_y","G_z","G_a","EMG1","A6","A7","A8"};
      
      sprintf(sensor[0],"%3d", 42);   sprintf(sensor[4],"%3d", 82);
      sprintf(sensor[1],"%3d",230);   sprintf(sensor[5],"%3d", 57);
      sprintf(sensor[2],"%3d",147);   sprintf(sensor[6],"%3d",255);
      sprintf(sensor[3],"%3d", 62);   sprintf(sensor[7],"%3d",  0);
      
      for(line=0; line<4; line++)
      {
        
        u8g2.setCursor(0,   start_cursor + (line+1)*line_width);  u8g2.print(sensorName[line]);
        u8g2.setCursor(27,  start_cursor + (line+1)*line_width);  u8g2.print(sensor[line]);
        u8g2.setCursor(73,  start_cursor + (line+1)*line_width);  u8g2.print(sensorName[line+4]);
        u8g2.setCursor(100, start_cursor + (line+1)*line_width);  u8g2.print(sensor[line+4]);
      }
      while( u8g2.nextPage() );
  }
}//oled_display
